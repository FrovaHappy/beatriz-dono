import './config'
import fs from 'node:fs'
import path from 'node:path'
import BuildEvent from './core/build/BuildEvent'
import BuildCommand from './core/build/BuildCommand'
import BuildMenu from './core/build/BuildMenu'
import BuildModal from './core/build/BuildModal'
import BuildButton from './core/build/BuildButtons'
import logger from './shared/logger'
import { Timer } from './shared/general'

async function readAllFiles(path: string, arrayOfFiles: string[] = [], typeFiles: string[] = ['.ts']) {
  const files = fs.readdirSync(path)
  for (const file of files) {
    const stat = fs.statSync(`${path}/${file}`)
    if (stat.isDirectory()) {
      readAllFiles(`${path}/${file}`, arrayOfFiles)
    }
    if (typeFiles.some(type => !file.endsWith(type))) continue
    arrayOfFiles.push(`${path}/${file}`)
  }
  return arrayOfFiles
}
interface Import {
  name: string
  path: string
  father: string
}

interface File {
  type: 'events' | 'services'
  category?: string
  name: string
  path: string
}

const fileToWrite = {
  head: `
    // This file is generated by the script generateListServices.ts
    import type BuildButton from '@/core/build/BuildButtons'
    import type BuildCommand from '@/core/build/BuildCommand'
    import type BuildEvent from '@/core/build/BuildEvent'
    import type BuildMenu from '@/core/build/BuildMenu'
    import type BuildModal from '@/core/build/BuildModal'
    
    // Events
    <events>

    // Services
    <commands>
    <menus>
    <modals>
    <buttons>
  `,
  body: `
    export const commands: Record<string, BuildCommand> = { <commands> }
    export const events: Record<string, BuildEvent<any>> = { <events> }
    export const menus: Record<string, BuildMenu<any>> = { <menus> }
    export const modals: Record<string, BuildModal> = { <modals> }
    export const buttons: Record<string, BuildButton> = { <buttons> }

    export default { commands, events, menus, modals, buttons }
  `
}
export default async function generateListServices() {
  const time = new Timer()
  const rootPath = process.cwd()
  const eventsFiles = await readAllFiles(path.join(rootPath, 'src/events'))
  const servicesFiles = await readAllFiles(path.join(rootPath, 'src/services'))
  const idInConflict: string[] = []

  // build list of imports
  const filesPromise = [...eventsFiles, ...servicesFiles].map(async (rawFile): Promise<File | undefined> => {
    const file = rawFile.replace(rootPath, '').replace('.ts', '').replaceAll('\\', '/').replace('src/', '')
    const resolve = (await import(`./${file}`))?.default
    if (!resolve) return
    if (resolve instanceof BuildEvent) {
      return {
        type: 'events',
        name: resolve.name,
        path: file
      }
    }
    if (resolve instanceof BuildCommand) {
      return {
        type: 'services',
        category: 'commands',
        name: resolve.name,
        path: file
      }
    }
    if (resolve instanceof BuildMenu) {
      return {
        type: 'services',
        category: 'menus',
        name: resolve.customId,
        path: file
      }
    }
    if (resolve instanceof BuildModal) {
      return {
        type: 'services',
        category: 'modals',
        name: resolve.customId,
        path: file
      }
    }
    if (resolve instanceof BuildButton) {
      return {
        type: 'services',
        category: 'buttons',
        name: resolve.customId,
        path: file
      }
    }
  })
  const files = (await Promise.all(filesPromise)).filter(file => !!file)

  for (const file of files) {
    if (file.type === 'events') {
      fileToWrite.head = fileToWrite.head.replace(
        '<events>',
        `import event_${file.name} from "@${file.path}"\n<events>`
      )
      fileToWrite.body = fileToWrite.body.replace('<events>', `${file.name}: event_${file.name}, <events>`)
      continue
    }
    if (file.category === 'commands') {
      fileToWrite.head = fileToWrite.head.replace(
        '<commands>',
        `import command_${file.name} from "@${file.path}"\n<commands>`
      )
      fileToWrite.body = fileToWrite.body.replace('<commands>', `${file.name}: command_${file.name}, <commands>`)
      continue
    }
    if (file.category === 'menus') {
      fileToWrite.head = fileToWrite.head.replace('<menus>', `import menu_${file.name} from "@${file.path}"\n<menus>`)
      fileToWrite.body = fileToWrite.body.replace('<menus>', `${file.name}: menu_${file.name}, <menus>`)
      continue
    }
    if (file.category === 'modals') {
      fileToWrite.head = fileToWrite.head.replace(
        '<modals>',
        `import modal_${file.name} from "@${file.path}"\n<modals>`
      )
      fileToWrite.body = fileToWrite.body.replace('<modals>', `${file.name}: modal_${file.name}, <modals>`)
      continue
    }
    if (file.category === 'buttons') {
      fileToWrite.head = fileToWrite.head.replace(
        '<buttons>',
        `import button_${file.name} from "@${file.path}"\n<buttons>`
      )
      fileToWrite.body = fileToWrite.body.replace('<buttons>', `${file.name}: button_${file.name}, <buttons>`)
    }
  }

  // Clear the tags
  fileToWrite.head = fileToWrite.head.replaceAll(/(<events>|<commands>|<menus>|<modals>|<buttons>)/g, '')
  fileToWrite.body = fileToWrite.body.replaceAll(/(<events>|<commands>|<menus>|<modals>|<buttons>)/g, '')

  fs.writeFileSync(path.join(rootPath, 'src', 'listImports.ts'), fileToWrite.head + fileToWrite.body)

  // check if no exists errors

  try {
    import('./listImports')
  } catch (error) {
    logger({
      type: 'error',
      head: 'Resources',
      title: 'Found services and resources',
      body: `
        Root path: ${rootPath}
        Files found: ${Object.keys(files).length}
        Finished in ${time.final()}
      `
    })
    process.exit(1)
  }

  logger({
    type: 'info',
    head: 'Resources',
    title: 'Found services and resources',
    body: `
      Root path: ${rootPath}
      Files found: ${Object.keys(files).length}
      Finished in ${time.final()}
    `
  })
}
generateListServices()
