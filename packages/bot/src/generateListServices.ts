import fs from 'node:fs'
import path from 'node:path'
import BuildEvent from './core/build/BuildEvent'
import BuildCommand from './core/build/BuildCommand'
import BuildMenu from './core/build/BuildMenu'
import BuildModal from './core/build/BuildModal'
import BuildButton from './core/build/BuildButtons'
import logger from './shared/logger'
import { Timer } from './shared/general'

async function readAllFiles(path: string, arrayOfFiles: string[] = [], typeFiles: string[] = ['.ts']) {
  const files = fs.readdirSync(path)
  for (const file of files) {
    const stat = fs.statSync(`${path}/${file}`)
    if (stat.isDirectory()) {
      readAllFiles(`${path}/${file}`, arrayOfFiles)
    }
    if (typeFiles.some(type => !file.endsWith(type))) continue
    arrayOfFiles.push(`${path}/${file}`)
  }
  return arrayOfFiles
}
interface Import {
  name: string
  path: string
  father: string
}

export default async function generateListServices() {
  const time = new Timer()
  const rootPath = process.cwd()
  const eventsFiles = await readAllFiles(path.join(rootPath, 'src/events'))
  const servicesFiles = await readAllFiles(path.join(rootPath, 'src/services'))
  const idInConflict: string[] = []
  let files = {} as Record<string, Import>
  for (const file of eventsFiles) {
    const relativePath = path.relative(path.resolve(rootPath, 'src'), path.resolve(file))
    const instFile = (await import(`./${relativePath}`))?.default

    if (instFile instanceof BuildEvent) {
      files = { ...files, [instFile.name]: { name: instFile.name, path: relativePath, father: 'events' } }
    }
  }
  for (const file of servicesFiles) {
    const relativePath = path.relative(path.resolve(rootPath, 'src'), path.resolve(file))
    const instFile = (await import(`./${relativePath}`))?.default
    if (files[instFile?.name ?? instFile?.customId]) idInConflict.push(instFile.name ?? instFile.customId)
    if (instFile instanceof BuildCommand) {
      files = { ...files, [instFile.name]: { name: instFile.name, path: relativePath, father: 'commands' } }
    }
    if (instFile instanceof BuildMenu) {
      files = { ...files, [instFile.customId]: { name: instFile.customId, path: relativePath, father: 'menus' } }
    }
    if (instFile instanceof BuildModal) {
      files = { ...files, [instFile.customId]: { name: instFile.customId, path: relativePath, father: 'modals' } }
    }
    if (instFile instanceof BuildButton) {
      files = { ...files, [instFile.customId]: { name: instFile.customId, path: relativePath, father: 'buttons' } }
    }
  }
  if (idInConflict.length > 0) {
    logger({
      type: 'error',
      head: 'Resources',
      title: 'Found services and resources',
      body: `
        Root path: ${rootPath}
        Files found: ${Object.keys(files).length}
        Name/CustomId in conflict: [${idInConflict.join(', ')}]
      `
    })
    process.exit(1)
  }

  let listHeader = `
  /**
   * This file is generated by the script generateListServices.ts
  */
  import type BuildEvent from '@/core/build/BuildEvent'
  import type BuildCommand from '@/core/build/BuildCommand'
  import type BuildMenu from '@/core/build/BuildMenu'
  import type BuildModal from '@/core/build/BuildModal'
  import type BuildButton from '@/core/build/BuildButtons'
  `
  let listBody = ''
  const listItems: Record<string, string> = {
    events: '',
    commands: '',
    menus: '',
    modals: '',
    buttons: ''
  }
  for (const event of Object.values(files)) {
    const dirFile = `@/${event.path.replace(/(.ts)$/, '').replaceAll('\\', '/')}`
    listHeader += `import ${event.name} from '${dirFile}'\n`
    listItems[event.father] += `${event.name}, `
  }
  listBody += `
    export const events: Record<string, BuildEvent<any>> = {
      ${listItems.events}
    }
    export const commands: Record<string, BuildCommand> = {
      ${listItems.commands}
    }
    export const menus: Record<string, BuildMenu<any>> = {
      ${listItems.menus}
    }
    export const modals: Record<string, BuildModal> = {
      ${listItems.modals}
    }
    export const buttons: Record<string, BuildButton> = {
      ${listItems.buttons}
    }
  `
  const listFile = listHeader + listBody
  fs.writeFileSync(path.join(rootPath, 'src', 'listImports.ts'), listFile)
  logger({
    type: 'info',
    head: 'Resources',
    title: 'Found services and resources',
    body: `
      Root path: ${rootPath}
      Files found: ${Object.keys(files).length}
      Finished in ${time.final()}
    `
  })
}
generateListServices()
